function p=ipss_par(arg)
%IPSS_PAR   interactive access at pss_par
%
%   p    is a pss_var structure
%
%   The argument arg can be a pss_par structure to be visualized or updated,
%   or a key ('init', for example)

% Version 1.0 - September 1999
% PSS Explorer is a Snag Application 
% by Sergio Frasca - sergio.frasca@roma1.infn.it
% Department of Physics - Universita` "La Sapienza" - Rome

p=pss_par(arg)

strdlong=num2str(p.antenna.long);
strdlat=num2str(p.antenna.lat);
strdazim=num2str(p.antenna.azim);
strdincl=num2str(p.antenna.incl);
answ=inputdlg({...
      'Detector longitude',...
      'Detector latitude',...
      'Detector azimuth',...
      'Detector inclination'},...
   'Physical parameters',1,{...
      strdlong,...
      strdlat,...
      strdazim,...
      strdincl});
p.antenna.long=eval(answ{1});
p.antenna.lat=eval(answ{2});
p.antenna.azim=eval(answ{3});
p.antenna.incl=eval(answ{4});

strsa=num2str(p.source.a);
strsd=num2str(p.source.d);
strsf0=num2str(p.source.f0);
strsdf0=num2str(p.source.df0);
strsddf0=num2str(p.source.ddf0);
strssnr=num2str(p.source.snr);
answ=inputdlg({...
      'Right ascension or ecliptical longitude',...
      'Declination or ecliptical latitude',...
      'Initial frequency',...
      'Initial derivative of the frequency',...
      'Second derivative of the frequency',...
      'Signal-to-Noise ratio'},...
   'Source parameters',1,{...
      strsa,...
      strsd,...
      strsf0,...
      strsdf0,...
      strsddf0,...
      strssnr});
p.source.name=['PS ' answ{1} ' - ' answ{2}];
p.source.a=eval(answ{1});
p.source.d=eval(answ{2});
p.source.f0=eval(answ{3});
p.source.df0=eval(answ{4});
p.source.ddf0=eval(answ{5});
p.source.snr=eval(answ{6});

strdt=num2str(p.data.dt);
strtobs=num2str(p.data.tobs);
strtinit=sprintf('%d  %d  %d  %d  %d  %f',p.data.tinit);
answ=inputdlg({...
      'Sampling time',...
      'Observation time (days)',...
      'Start time'},...
   'Data parameters',1,{...
      strdt,...
      strtobs,...
      strtinit});
p.data.dt=eval(answ{1});
p.data.tobs=eval(answ{2});
p.data.tinit=sscanf(answ{3},'%d  %d  %d  %d  %d  %f');

strlen=num2str(p.fft.len);
stronev=num2str(p.fft.onev);
answ=inputdlg({...
      'fft length',...
      'take one every...'},...
   'fft parameters',1,{...
      strlen,...
      stronev});
p.fft.len=eval(answ{1});
p.fft.onev=eval(answ{2});

strBf1=num2str(p.band.Bf1);
strdf0=num2str(p.band.df0);
strddf0=num2str(p.band.ddf0);
strerrf0=num2str(p.band.errf0);
strknatb=num2str(p.band.knatb);
answ=inputdlg({...
      'Full band initial frequency',...
      'Initial f0 first derivative',...
      'f0 second derivative',...
      'Error in f0 (number of frequency bins)',...
      'Widening factor of natural sub-band'},...
   'Band parameters',1,{...
      strBf1,...
      strdf0,...
      strddf0,...
      strerrf0,...
      strknatb});
p.band.Bf1=eval(answ{1});
p.band.df0=eval(answ{2});
p.band.ddf0=eval(answ{3});
p.band.errf0=eval(answ{4});
p.band.knatb=eval(answ{5});

strtyp=num2str(p.hmap.type);
strmod=p.hmap.mode;
strda=num2str(p.hmap.da);
strdd=num2str(p.hmap.dd);
stra1=num2str(p.hmap.a1);
stra2=num2str(p.hmap.a2);
strd1=num2str(p.hmap.d1);
strd2=num2str(p.hmap.d2);
strDf0=num2str(p.hmap.Df0);
strf01=num2str(p.hmap.f01);
strf02=num2str(p.hmap.f02);
strDdf0=num2str(p.hmap.Ddf0);
strdf01=num2str(p.hmap.df01);
strdf02=num2str(p.hmap.df02);
strDddf0=num2str(p.hmap.Dddf0);
strddf01=num2str(p.hmap.ddf01);
strddf02=num2str(p.hmap.ddf02);
strgd2nam=p.hmap.gd2name;
strtrmnam=p.hmap.trmname;
answ=inputdlg({...
      'type: 0 -> equatorial, 1 -> ecliptical',...
      'mode: rectangular, triangles',...
      'right ascension or lambda resolution',...
      'declination or b resolution',...
      'initial a coordinate',...
      'final a coordinate',...
      'initial d coordinate',...
      'final d coordinate',...
      'f0 step',...
      'initial f0'},...
   'Map parameters 1',1,{...
      strtyp,...
      strmod,...
      strda,...
      strdd,...
      stra1,...
      stra2,...
      strd1,...
      strd2,...
      strDf0,...
      strf01});
p.hmap.type=eval(answ{1});
p.hmap.mode=answ{2};
p.hmap.da=eval(answ{3});
p.hmap.dd=eval(answ{4});
p.hmap.a1=eval(answ{5});
p.hmap.a2=eval(answ{6});
p.hmap.d1=eval(answ{7});
p.hmap.d2=eval(answ{8});
p.hmap.Df0=eval(answ{9});
p.hmap.f01=eval(answ{10});

answ=inputdlg({...
      'final f0',...
      'df0 step',...
      'initial df0',...
      'final df0',...
      'ddf0 step',...
      'initial ddf0',...
      'final ddf0',...
      'gd2 name',...
		'trmap name'},...
   'Map parameters 2',1,{...
      strf02,...
      strDdf0,...
      strdf01,...
      strdf02,...
      strDddf0,...
      strddf01,...
      strddf02,...
      strgd2nam,...
   	strtrmnam});
p.hmap.f02=eval(answ{1});
p.hmap.Ddf0=eval(answ{2});
p.hmap.df01=eval(answ{3});
p.hmap.df02=eval(answ{4});
p.hmap.Dddf0=eval(answ{5});
p.hmap.ddf01=eval(answ{6});
p.hmap.ddf02=eval(answ{7});
p.hmap.gd2name=answ{8};
p.hmap.trmname=answ{9};

strthr=num2str(p.tfmap.thr);
strgd2nam=p.tfmap.gd2name;
strcapt=p.tfmap.capt;
strmtyp=p.mapping.type;
strkdf=num2str(p.mapping.kdf);
strmeth=num2str(p.comp.method);
answ=inputdlg({...
      'Peak''s threshold'...
      'Name of the gd2 with the ft map'...
      'Caption of the gd2'...
      'Mapping type'...
      'Mapping frequency semi-width'...
      'Computing parameters'},...
   'Various parameters',1,{...
      strthr...
      strgd2nam...
      strcapt...
      strmtyp...
      strkdf...
      strmeth...
   });
p.tfmap.thr=eval(answ{1});
p.tfmap.gd2name=answ{2};
p.tfmap.capt=answ{3};
p.mapping.type=answ{4};
p.mapping.kdf=eval(answ{5});
p.comp.method=answ{6};
   
p=pss_par(p);

str0='_______________________________________';

strtnum=sprintf('Numeric time (days)  %f',p.data.tnum);
msgbox({str0,strtnum,str0},'Physical parameters');

strsf=sprintf('Sampling frequency  %f',p.data.sf);
msgbox({str0,strsf,str0},'Data parameters');

strtlen=sprintf('Time length (s)                   %f',p.fft.tlen);
strN=sprintf('Number of ffts                   %f',p.fft.N);
strdf=sprintf('Frequency bin                    %f',p.fft.df);
msgbox({str0,strtlen,strN,strdf,str0},'fft parameters');

strBf2=sprintf('Full band superior limit               %f',p.band.Bf2);
strf0=sprintf('Hypothesized initial frequency  %f',p.band.f0);
strnatb=sprintf('Natural work band                 %f',p.band.natb);
strb1=sprintf('Work band minimum              %f',p.band.bf1);
strb2=sprintf('Work band maximum              %f',p.band.bf2);
msgbox({str0,strBf2,strf0,strnatb,strb1,strb2,str0},'Band parameters');

strna=sprintf('Number of as (or ls)      %f',p.hmap.na);
strnd=sprintf('Number of ds (or bs)      %f',p.hmap.nd);
strstres=sprintf('Standard resolution       %f',p.hmap.stres);
strnf0=sprintf('Number of f0s             %f',p.hmap.nf0);
strndf0=sprintf('Number of df0s          %f',p.hmap.ndf0);
strnddf0=sprintf('Number of ddf0s         %f',p.hmap.nddf0);
msgbox({str0,strna,strnd,strstres,strnf0,strndf0,strnddf0,str0},...
   'Hough Map parameters');

strgfl=sprintf('Gigaflops needed       %f',p.comp.gflops);
strgbyt=sprintf('Gigabytes needed       %f',p.comp.gbytes);
msgbox({str0,strgfl,strgbyt,str0},'Computation parameters');
