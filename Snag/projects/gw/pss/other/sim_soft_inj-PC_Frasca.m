function out=sim_soft_inj(injsour,norfac)
%
%    out=ana_soft_inj(injsour,cands)
%
%   norfac    normalization factor (as Tobs/Tcoh ~ number of non-interlaced FFTs)
%      
%  injsour    (10,N) injected sources (as generated by pss_rand_sour)
%     1          inj freq
%     2          inj lambda
%     3          inj beta
%     4          inj s.d.
%     5          inj h
%     6          inj hnorm
%     7          inj eta
%     8          inj psi
%     9          equivalent alfa
%    10          equivalent delta
%
%    out      (18,N) injected sources output
%     1          inj freq
%     2          inj lambda
%     3          inj beta
%     4          inj s.d.
%     5          inj h
%     6          inj hnorm
%     7          inj eta
%     8          inj psi
%     9          detected freq
%    10          detected lambda
%    11          detected beta
%    12          detected s.d.
%    13          detected h
%    14          detected hnorm (inessential)
%    15          unc lambda
%    16          unc beta
%    17          computed eta
%    18          computed psi
% %  cands      detected candidates for upper limit
% %    1.         frequency
% %    2.         lambda
% %    3.         beta
% %    4.         spin-down
% %    5.         h

% Snag version 2.0 - January 2015 
% Part of Snag toolbox - Signal and Noise for Gravitational Antennas
% by Sergio Frasca - sergio.frasca@roma1.infn.it
% Department of Physics - Sapienza University - Rome

[N,dum]=size(injsour);

multisour=zeros(N,4);
multisour(:,1)=injsour(:,9);
multisour(:,2)=injsour(:,10);
multisour(:,3)=injsour(:,7);
multisour(:,4)=injsour(:,8);

[v,vn]=multisour_ant_2_5vec(virgo,multisour);

out.v5=v;
out.eff=mean(vn); % Attention !
v5nn=vn/out.eff; % normalized norm
out.v5nn=v5nn;   % normalized norm

hnoise=norfac^0.25*injsour(:,5)./injsour(:,6);
% hnoise=injsour(:,5)./injsour(:,6);
out.hnoise=hnoise;

signal=sqrt((v5nn.*injsour(:,5)+randn(N,1).*hnoise).^2);
sn=signal./hnoise;
out.signal=signal;
out.sn=sn;
out.signorm=signal./(injsour(:,5)./injsour(:,6));

thresh=2.5;
det=zeros(N,1);
det=find(sn.^2 > thresh);
out.det=det;